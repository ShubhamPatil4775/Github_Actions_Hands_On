GitHub Actions Workflow Notes
Environment Variables
This workflow demonstrates how to define and use environment variables at different levels.

env
This section defines environment variables. They are key-value pairs that can be accessed during the workflow's execution.

Global Variable: Defined at the workflow level, accessible to all jobs and steps.

Job Variable: Defined within a specific job, only accessible to the steps within that job.

Step Variable: Defined within a single step, only accessible to that step.

The more specific the scope, the higher its priority (e.g., a job variable will override a global variable with the same name).

Java Setup
This workflow shows how to configure a specific Java Development Kit (JDK) on a runner.

jobs: java-setup
runs-on: ubuntu-latest: The job runs on an Ubuntu runner.

uses: actions/setup-java@v4: This step uses a pre-built GitHub Action to install and configure a Java JDK.

with: This section specifies the inputs for the action, such as the java-version and distribution (e.g., microsoft).

Needs
This workflow demonstrates how to run jobs in a specific order using the needs keyword.

build: This job runs first and independently.

test: This job needs: build, meaning it waits for the build job to finish successfully before starting.

deploy: This job needs: [build, test], meaning it waits for both the build and test jobs to complete successfully before it begins.

Github Context workflow
This workflow shows how to access various pieces of information about the workflow run using the github context.

Print Github Context Information: This step uses the ${{ github.<property> }} syntax to access details like github.repository, github.actor, github.ref, and github.event_name.

Conditional Logic: The if keyword can be used with the github context to make steps run only under certain conditions (e.g., if: github.ref == 'refs/heads/master').

Matrix
This workflow uses a simple matrix strategy to run multiple jobs with different configurations.

strategy
matrix: Defines the variables for the matrix.

os: [ubuntu-latest, windows-latest]: Specifies the operating systems.

java-version: [17, 21]: Specifies the Java versions.

runs-on: ${{matrix.os}}: Dynamically sets the runner OS.

with: java-version: ${{matrix.java-version}}: Dynamically sets the Java version for the setup action.

This creates a job for every possible combination of the variables.

Matrix Strategies
This workflow uses a more advanced matrix strategy with explicit controls.

strategy
fail-fast: false: If one job in the matrix fails, the others will continue to run. By default, they would be canceled.

max-parallel: 2: Limits the number of jobs that can run at the same time to a maximum of two.

matrix.include: This allows you to explicitly list each job's configuration, rather than letting GitHub create all combinations automatically.

Node.js Setup
This workflow configures a specific version of Node.js on a runner.

nodejs-setup
uses: actions/setup-node@v4: This pre-built action installs a specified version of Node.js and npm.

with: node-version: '20': This input specifies that version 20 of Node.js should be installed.

Outputs
This workflow shows how to pass data from one job to another using outputs.

gen-msg
outputs: Declares which outputs this job will make available.

echo "greeting= Hello Welcome" >> $GITHUB_OUTPUT: This command writes an output variable (greeting) to the special GITHUB_OUTPUT file, making it accessible to other jobs.

dis-msg
needs: gen-msg: This dependency ensures this job runs after gen-msg has completed.

echo '${{needs.gen-msg.outputs.message}}': This command retrieves and prints the output value from the previous job using the needs.<job_id>.outputs.<output_name> syntax.

Python Setup
This workflow configures a specific version of Python on a runner.

python-setup
uses: actions/setup-python@v4: This pre-built action installs and configures a specific Python version.

with: python-version: '3.9': This input specifies that version 3.9 of Python should be installed.

Repository Secrets
This workflow demonstrates how to securely access repository secrets.

repository-secret
secrets.MY_SECRET: This is how you access a custom repository secret. These are sensitive values (like API keys) that are defined in the repository settings and masked in the workflow logs.

secrets.GITHUB_TOKEN: This is a special secret that is automatically generated by GitHub for every workflow run for authentication.

Repository Variable
This workflow demonstrates how to access repository variables.

repository_variable
vars.MY_VAR: This is how you access a custom repository variable. Unlike secrets, these are for non-sensitive configuration values and are not hidden in the workflow logs.
